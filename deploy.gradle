apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def artifactName = 'TAConfetti'
def artifactGroupId = 'com.tailoredapps'
def artifactIdlul = 'confetti'
def artifactGitUrl = 'https://github.com/tailoredmedia/TAAndroidConfetti.git'
def artifactWebUrl = 'https://github.com/tailoredmedia/TAAndroidConfetti'
def artifactDescription = 'Displays Tailored Apps Confetti.'

def localProperties = new Properties()
localProperties.load(project.rootProject.file('local.properties').newDataInputStream())

group = artifactGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId artifactGroupId
            artifactId artifactIdlul

            name artifactName
            description artifactDescription
            url artifactWebUrl

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    id 'tailoredmedia'
                    name 'Tailored Apps'
                    email 'office@tailored-apps.com'
                }
            }
            scm {
                connection artifactGitUrl
                developerConnection artifactGitUrl
                url artifactWebUrl
            }
        }
        pom.withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            configurations.api.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
                def dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dp.group)
                dependencyNode.appendNode('artifactId', dp.name)
                dependencyNode.appendNode('version', dp.version)
            }
        }
    }
}

bintray {
    user = localProperties.getProperty("bintray.user")
    key = localProperties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = 'TAConfetti'
        name = artifactIdlul
        desc = artifactDescription
        websiteUrl = artifactWebUrl
        vcsUrl = artifactGitUrl
        licenses = ["Apache-2.0"]
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = artifactDescription
        }
    }
}

if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}